#AES S-box
s_box = [
    [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
    [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
    [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
    [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
    [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
    [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
    [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
    [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
    [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
    [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
    [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
    [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
    [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
    [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
    [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
    [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]
]

# Calculate the Round Constants
#0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36
def calculate_rcon():
    r_con = [None] * 10
    r_con[0] = 1
    for x in range(1,10):
        if(r_con[x-1] >= 0x80):
            #If the result > 0x80, reduce by the AES irreducible polynomial
            r_con[x] = (2 * r_con[x-1] ) ^ 0x11B
        else:
            #otherwise just double it as normal
            r_con[x] = 2 * r_con[x-1]
    return r_con

#S-box substitution
def sbox(bIn):
    col = bIn & 0xF
    row = (bIn >> 4) & 0xF
    return s_box[row][col]

#Split the 256-bit key into 32-bit words
def splitkey(inkey, words):
    shift = 224
    for x in range(8):
        words[x] = (inkey >> shift) & 0xFFFFFFFF
        shift -= 32
    return words

#Helper function to byte-wise left rotate a 32-bit word
def l_rotate_word(word):
    word = ((word << 8) & 0xFFFFFF00)  | ((word >> 24) & 0xFF)
    return word

#The AES G function
def g(wIn, rc):
    wIn = l_rotate_word(wIn)
    w0 = wIn >> 24 & 0xFF
    w1 = wIn >> 16 & 0xFF
    w2 = wIn >> 8 &  0xFF
    w3 = wIn & 0xFF
    w0 = sbox(w0) ^ rc
    w1 = sbox(w1)
    w2 = sbox(w2)
    w3 = sbox(w3)
    ret = w0 << 24 | w1 << 16 | w2 << 8 | w3
    return ret

#The AES 256 H-function
def h(wIn):
    w0 = sbox(wIn >> 24 & 0xFF)
    w1 = sbox(wIn >> 16 & 0xFF)
    w2 = sbox(wIn >> 8 &  0xFF)
    w3 = sbox(wIn & 0xFF)
    ret = w0 << 24 | w1 << 16 | w2 << 8 | w3
    return ret

#Expand the 256-bit key into the 15 round keys
def key_expansion(inkey):
    #Split the initial key into words 0-7
    words = [None] * 60
    words = splitkey(inkey, words)
    
    #Start calculating the remaining words
    rconIdx = 0
    r_con = calculate_rcon()
    for x in range(8,60):
        if x % 8 == 0:
            #every 8th word uses the G function
            words[x] = g(words[x-1], r_con[rconIdx]) ^ words[x-8]
            rconIdx = rconIdx + 1
        elif x % 4 == 0:
            #Every other fourth word uses the H function
            words[x] = h(words[x-1]) ^ words[x-8]
        else:
            #Otherwise use a simple XOR
            words[x] = words[x-1] ^ words[x-8]

    #every 4 words forms a subkey
    keyIdx = 0
    keys = [None] * 15
    for x in range(61):
        if x != 0 and (x % 4) == 0:
            keys[keyIdx] = (words[x-4] << 96) | (words[x-3] << 64) | (words[x-2] << 32) | words[x-1]
            keyIdx = keyIdx + 1

    return keys

def get_last_key(key):
    a = hex(key_expansion(key)[-1])
    b = hex(key_expansion(key)[-2])
    c = a[2:] + b[2:]
    return c